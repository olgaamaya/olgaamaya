function scale(x) {
    const menuToggle = document.getElementById('menu-toggle');
    const anyLightboxOpen = document.querySelector("[id^='Lightbox_'][style*='display: flex']");

    if (x.matches && !anyLightboxOpen) { // Only show menu-toggle if no lightbox is open
        menuToggle.style.display = 'flex';
    } else {
        menuToggle.style.display = 'none';
    }
}

var x = window.matchMedia("(max-width: 1000px)");
scale(x); // Call listener function at runtime
x.addListener(scale); // Attach listener function on state changes 

let lastScrollPosition = 0;

function openLightbox(lightboxId) {
    // Store the current scroll position before opening the lightbox
    lastScrollPosition = window.scrollY || window.pageYOffset;

    // Close any other open lightboxes
    document.querySelectorAll("[id^='Lightbox_']").forEach(lightbox => {
        if (lightbox.id !== `Lightbox_${lightboxId}`) {
            lightbox.style.display = "none";
        }
    });

    // Open the selected lightbox
    document.getElementById(`Lightbox_${lightboxId}`).style.display = "flex";

    // Hide unnecessary elements
    document.getElementById(`projecttitle_${lightboxId}`).style.display = "block";
    document.getElementById("mouseTarget").style.display = "none";
    document.getElementsByTagName("body")[0].style.overflow = "hidden";
    document.getElementById("rowid").style.display = "none";
    document.getElementById("menu-toggle").style.display = "none";
    document.getElementsByTagName("Footer")[0].style.display = "none";
    document.getElementById("social_elements2").style.display = "none";
    document.getElementById("menu-toggle").style.display = "none";

    // Enable keyboard navigation for this lightbox
    setKeys(lightboxId);

    // Ensure menu-toggle stays hidden
    scale(x);

}

function closeLightbox(lightboxId) {
    // Close the specific lightbox
    document.getElementById(`Lightbox_${lightboxId}`).style.display = "none";

    // Pause all videos when closing a lightbox
    pauseVideo(lightboxId);

    // Restore other UI elements
    document.getElementById(`projecttitle_${lightboxId}`).style.display = "none";
    document.getElementById("mouseTarget").style.display = "flex";
    document.getElementsByTagName("body")[0].style.overflow = "";
    document.getElementById("rowid").style.display = "grid";
    document.getElementsByTagName("Footer")[0].style.display = "flex";

    // Handle menu visibility based on screen size
    if (window.matchMedia("(max-width: 950px)").matches) {
        document.getElementById("menu-toggle").style.display = "flex";
    } else {
        document.getElementById("menu-toggle").style.display = "none";
    }

    document.getElementById("social_elements2").style.display = "";

    // Restore the scroll position smoothly
    window.scrollTo({ top: lastScrollPosition, behavior: "smooth" });

    // Disable keyboard navigation when closing lightbox
    window.onkeydown = null;

    // Ensure menu-toggle stays hidden
    scale(x);

}

// Function to pause any video inside a lightbox
function pauseVideo(lightboxId) {
    document.querySelectorAll(`#Lightbox_${lightboxId} video`).forEach(video => {
        video.pause();
        video.currentTime = 0; // Reset video to the beginning (optional)
    });
}

function setKeys(slideGroup) {
    window.onkeydown = function(e) {
        if (e.keyCode === 37) {
            showSlide(slideGroup, slideIndex - 1); // Left Arrow (Previous Slide)
        } else if (e.keyCode === 39) {
            showSlide(slideGroup, slideIndex + 1); // Right Arrow (Next Slide)
        }
    };
}

function changeSlide(NR, n) {
    // Update slideIndex based on direction (n)
    slideIndex += n;

    // Get all slides for the given slide group
    let slides = document.getElementsByClassName(`slide${NR}`);

    // Ensure slideIndex is within bounds
    if (slideIndex < 1) {
        slideIndex = slides.length; // Wrap around to the last slide
    } else if (slideIndex > slides.length) {
        slideIndex = 1; // Wrap around to the first slide
    }

    // Call showSlide with the updated slideIndex and slide group
    showSlide(NR, slideIndex);

    // Dispatch the slideChange event to update preloading
    document.dispatchEvent(new Event("slideChange"));
}

function toSlide(slideGroup, e) {
    showSlide(slideGroup, (slideIndex = e));
}

function showSlide(slideGroup, e) {
    let slides = document.getElementsByClassName(`slide${slideGroup}`),
        previews = document.getElementsByClassName(`modal-preview`);

    // Preload all images in the slides before displaying the selected slide
    preloadImages(slides);

    // Ensure slideIndex is within bounds
    if (e > slides.length) {
        slideIndex = 1;
    } else if (e < 1) {
        slideIndex = slides.length;
    } else {
        slideIndex = e;
    }

    // If there is only one slide, set it as active and return early
    if (slides.length === 1) {
        slides[0].style.display = "flex";
        slides[0].classList.add("active-slide");
        let selectedImages = slides[0].getElementsByClassName("image-slide");
        for (let i = 0; i < selectedImages.length; i++) {
            selectedImages[i].classList.add("active-slide2");
        }
        return; // No need for further processing
    }

    // If there are exactly two slides, only show active-slide and next-slide
    if (slides.length === 2) {
        for (let n = 0; n < slides.length; n++) {
            slides[n].style.display = "none"; // Hide all slides initially
            slides[n].classList.remove("active-slide", "previous-slide", "next-slide"); // Remove active/previous/next classes

            // Remove "active-slide" class from any children of the slide
            let children = slides[n].children;
            for (let c = 0; c < children.length; c++) {
                children[c].classList.remove("active-slide");
            }

            // Remove the "active-slide2" class from all images
            let images = slides[n].getElementsByClassName("image-slide");
            for (let i = 0; i < images.length; i++) {
                images[i].classList.remove("active-slide2");
            }
        }

        // Show the active slide and the next slide
        slides[slideIndex - 1].style.display = "flex";
        slides[slideIndex - 1].classList.add("active-slide");
        let selectedImages = slides[slideIndex - 1].getElementsByClassName("image-slide");
        for (let i = 0; i < selectedImages.length; i++) {
            selectedImages[i].classList.add("active-slide2");
        }

        // Determine the next slide index
        let nextIndex = slideIndex < slides.length ? slideIndex : 0;
        slides[nextIndex].style.display = "flex";
        slides[nextIndex].classList.add("next-slide");

        return; // No need for previous-slide in case of two slides
    }

    // Hide all slides and remove previous/next class names
    for (let n = 0; n < slides.length; n++) {
        slides[n].style.display = "none"; // Hide all slides initially
        slides[n].classList.remove("active-slide", "previous-slide", "next-slide"); // Remove active/previous/next classes

        // Remove "active-slide" class from any children of the slide
        let children = slides[n].children;
        for (let c = 0; c < children.length; c++) {
            children[c].classList.remove("active-slide");
        }

        // Remove the "active-slide2" class from all images
        let images = slides[n].getElementsByClassName("image-slide");
        for (let i = 0; i < images.length; i++) {
            images[i].classList.remove("active-slide2");
        }
    }

    // Remove "active" class from all modal previews
    for (let s = 0; s < previews.length; s++) {
        previews[s].className = previews[s].className.replace(" active", "");
    }

    // Show the selected (active) slide
    slides[slideIndex - 1].style.display = "flex";
    slides[slideIndex - 1].classList.add("active-slide");

    // Add "active-slide2" class to the image inside the selected slide
    let selectedImages = slides[slideIndex - 1].getElementsByClassName("image-slide");
    for (let i = 0; i < selectedImages.length; i++) {
        selectedImages[i].classList.add("active-slide2");
    }

    // Determine the previous slide (handle edge case where the first slide is active)
    let prevIndex = slideIndex - 2 >= 0 ? slideIndex - 2 : slides.length - 1;
    slides[prevIndex].style.display = "flex";
    slides[prevIndex].classList.add("previous-slide");

    // Determine the next slide (handle edge case where the last slide is active)
    let nextIndex = slideIndex < slides.length ? slideIndex : 0;
    slides[nextIndex].style.display = "flex";
    slides[nextIndex].classList.add("next-slide");
}


document.addEventListener("DOMContentLoaded", function() {
    const allImageSlides = document.querySelectorAll("img.image-slide");
    const allVideos = document.querySelectorAll("video.videofront");

    function preloadVisibleSlides() {
        // Preload images in active, next, and previous slides
        const extraPreloadedImages = document.querySelectorAll(
            ".active-slide img.image-slide, .next-slide img.image-slide, .previous-slide img.image-slide"
        );

        extraPreloadedImages.forEach(img => img.loading = "eager");
    }

    function preloadImagesByFolder() {
        // Preload all images inside the specified folders
        allImageSlides.forEach(img => {
            if (
                img.src.includes("IMG/img_cover/") ||
                img.src.includes("IMG/thinkingmu/") ||
                img.src.includes("IMG/matyfall/") ||
                img.src.includes("IMG/mango_teen_special_2/")
            ) {
                img.loading = "eager"; // Preload images in specified folders
            }
        });
    }

    function lazyLoadOthers() {
        // Ensure all other images are lazy-loaded
        allImageSlides.forEach(img => {
            if (!img.loading) {
                img.loading = "lazy";
            }
        });

        // Ensure all other videos are lazy-loaded
        allVideos.forEach(video => {
            if (video.preload !== "auto") {
                video.preload = "none";
            }
        });
    }

    // Initial preloading on page load
    preloadVisibleSlides();
    preloadImagesByFolder();
    lazyLoadOthers();

    // Attach event listener for slide changes
    document.addEventListener("slideChange", preloadVisibleSlides);
});


// Function to preload all images in the slides
function preloadImages(slides) {
    for (let slide of slides) {
        let images = slide.getElementsByClassName("image-slide");
        for (let img of images) {
            let preloadedImg = new Image();
            preloadedImg.src = img.src; // Preload the image
        }
    }
}



function showOverlay() {
    (overlayShown = !0),
    overlay.addClass("overlay-shown"),
        (overlaySavedScrollTop = body.scrollTop()),
        (overlaySavedScrollLeft = body.scrollLeft()),
        (overlayScrollListener = body.scroll(function() {
            body.scrollTop(overlaySavedScrollTop),
                body.scrollLeft(overlaySavedScrollLeft);
        }));
}

(overlayShown = !1),
(overlayScrollListener = null),
(overlaySavedScrollTop = 0),
(overlaySavedScrollLeft = 0);
var leftKey = 37,
    upKey = 38,
    rightKey = 39,
    downKey = 40,
    keystate = [""];


// Function to find the highest lightbox number for lightbox before pointer of the first project summerpostisolation
function getHighestLightboxNumber() {
    // Get all elements that might be lightboxes (e.g., those with an id starting with 'Lightbox_')
    const lightboxes = document.querySelectorAll('[id^="Lightbox_"]'); // Adjusted selector to match your IDs
    let highest = 0;

    lightboxes.forEach(function(lightbox) {
        // Assuming the ID is something like 'Lightbox_1', 'Lightbox_2', etc.
        const id = lightbox.id;
        const number = parseInt(id.replace('Lightbox_', '')); // Extract the number after 'Lightbox_'
        if (number > highest) {
            highest = number; // Update the highest number
        }
    });

    return highest; // Return the highest number
}

// Function to initialize and assign the highest lightbox number to X
function setupPointer() {
    const Xmax = getHighestLightboxNumber(); // Get the highest lightbox number

    // Now use X in your onclick event
    const pointerElement = document.getElementById("before-pointer");

    pointerElement.onclick = function() {
        openLightbox(Xmax);
        toSlide(Xmax, 1);
    };
}

// Call setupPointer to initialize when the page loads
window.onload = setupPointer;